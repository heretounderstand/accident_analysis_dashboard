import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
from ..data_loader import load_data, filter_data
from ..utils.viz_helpers import style_chart, create_time_series
from ..components.filters import render_filters
from statsmodels.tsa.seasonal import seasonal_decompose
from ..config import THEME_CONFIG

def create_timeline(df, metric='Number of Fatalities'):
    """Cr√©ation de la ligne temporelle interactive"""
    time_data = df.groupby(['Year', 'Month']).agg({
        'Number of Fatalities': 'sum',
        'Number of Injuries': 'sum'
    }).reset_index()

    month_map = {
        'January': 1, 'February': 2, 'March': 3, 'April': 4,
        'May': 5, 'June': 6, 'July': 7, 'August': 8,
        'September': 9, 'October': 10, 'November': 11, 'December': 12
    }
        
    time_data.index = pd.to_datetime(time_data['Year'].astype(str) + '-' + time_data['Month'].map(month_map).astype(str) + '-01')
    time_data = time_data.sort_index()
    
    fig = create_time_series(
        time_data,
        x_col=time_data.index,
        y_col=metric,
        color= THEME_CONFIG['secondary'] if metric == "Number of Injuries" else THEME_CONFIG['primary']
    )
    return fig

def create_weekly_hourly_heatmap(df, metric='Number of Fatalities'):
    """Cr√©ation de la heatmap jour/heure"""
    time_order = ["Morning", "Afternoon", "Evening", "Night"]
    day_order = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
    df["Day of Week"] = pd.Categorical(df["Day of Week"], categories=day_order, ordered=True)
    df["Time of Day"] = pd.Categorical(df["Time of Day"], categories=time_order, ordered=True)
    heatmap_data = df.pivot_table(
        index='Day of Week',
        columns='Time of Day',
        values= metric,
        aggfunc='sum'
    ).fillna(0)
    
    fig = px.imshow(
        heatmap_data,
        color_continuous_scale='Reds' if metric == "Number of Fatalities" else 'Blues'
    )
    return style_chart(fig)

def create_monthly_distribution(df):
    """Cr√©ation du graphique en barres cyclique mensuel"""
    month_order = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
    df["Month"] = pd.Categorical(df["Month"], categories=month_order, ordered=True)
    monthly_data = df.groupby('Month').agg({
        'Number of Fatalities': 'sum',
        'Number of Injuries': 'sum'
    }).reset_index()
    
    fig = go.Figure()
    fig.add_trace(go.Bar(
        x=monthly_data['Month'],
        y=monthly_data['Number of Injuries'],
        name='Bless√©s',
        marker_color=THEME_CONFIG['secondary']
    ))

    fig.add_trace(go.Bar(
        x=monthly_data['Month'],
        y=monthly_data['Number of Fatalities'],
        name='D√©c√®s',
        marker_color=THEME_CONFIG['primary']
    ))

    # Mise en page pour empiler les barres
    fig.update_layout(
        barmode='stack',  # Mode empil√©
        xaxis_title="Mois",
        yaxis_title="Nombre de cas",
        legend_title="Type d'accident"
    )
    return style_chart(fig)

def create_temporal_decomposition(df):
    """Cr√©ation de la d√©composition temporelle"""
    # Pr√©paration des donn√©es temporelles
    time_series = df.groupby(['Year', 'Month']).agg({
        'Number of Fatalities': 'sum',
        'Number of Injuries': 'sum'
    }).reset_index()
    month_map = {
        'January': 1, 'February': 2, 'March': 3, 'April': 4,
        'May': 5, 'June': 6, 'July': 7, 'August': 8,
        'September': 9, 'October': 10, 'November': 11, 'December': 12
    }
        
    time_series.index = pd.to_datetime(time_series['Year'].astype(str) + '-' + time_series['Month'].map(month_map).astype(str) + '-01')
    time_series = time_series.sort_index()


    # D√©composition
    decomposition = seasonal_decompose(
        time_series["Number of Fatalities"] + time_series["Number of Injuries"],
        period=12
    )
    
    # Cr√©ation du graphique
    fig = go.Figure()
    fig.add_trace(go.Scatter(
        x=time_series.index,
        y=decomposition.seasonal,
        name='Saisonnalit√©'
    ))
    fig.add_trace(go.Scatter(
        x=time_series.index,
        y=decomposition.resid,
        name='R√©sidus'
    ))
    fig.add_trace(go.Scatter(
        x=time_series.index,
        y=decomposition.trend,
        name='Tendance'
    ))
    
    fig.update_layout(xaxis_title='Date',
                      yaxis_title='Nombre de cas')
    return style_chart(fig)

def render_temporal_page():
    """
    Affiche la page d'analyse temporelle des accidents avec une interface am√©lior√©e
    """
    # En-t√™te avec contexte
    st.title("‚è≥ Analyse Temporelle des Accidents")
    st.markdown("""
        Explorez l'√©volution des accidents dans le temps et identifiez les tendances et motifs temporels.
        Utilisez les filtres dans la barre lat√©rale pour affiner votre analyse.
    """)

    # Chargement des donn√©es avec indicateur de progression
    with st.spinner("Chargement des donn√©es..."):
        df = load_data()
        if df is None:
            st.error("‚ùå Erreur lors du chargement des donn√©es.")
            return

    # Application des filtres
    filters = render_filters()
    filtered_df = filter_data(df, filters)
    
    # Conteneur pour les m√©triques temporelles cl√©s
    with st.container():
        cols = st.columns(4)
        
        # Calcul des variations sur la p√©riode
        current_year = filtered_df['Date'].max()
        previous_year = current_year - pd.DateOffset(years=1)
        current_data = filtered_df[filtered_df['Date'].dt.year == current_year.year]
        previous_data = filtered_df[filtered_df['Date'].dt.year == previous_year.year]
        
        with cols[0]:
            variation_accidents = ((len(current_data) - len(previous_data)) / len(previous_data) * 100
                                 if len(previous_data) > 0 else 0)
            st.metric(
                "Accidents 2024",
                f"{len(current_data):,}",
                f"{variation_accidents:+.1f}%",
                help="Nombre d'accidents de 2024 et variation par rapport √† 2023",
                delta_color='inverse'
            )
        
        with cols[1]:
            current_fatalities = current_data['Number of Fatalities'].sum()
            previous_fatalities = previous_data['Number of Fatalities'].sum()
            variation_fatalities = ((current_fatalities - previous_fatalities) / previous_fatalities * 100
                                  if previous_fatalities > 0 else 0)
            st.metric(
                "D√©c√®s 2024",
                f"{current_fatalities:,}",
                f"{variation_fatalities:+.1f}%",
                help="Nombre de d√©c√®s de 2024 et variation par rapport √† 2023",
                delta_color='inverse'
            )
        
        with cols[2]:
            current_injuries = current_data['Number of Injuries'].sum()
            previous_injuries = previous_data['Number of Injuries'].sum()
            variation_injuries = ((current_injuries - previous_injuries) / previous_injuries * 100
                                if previous_injuries > 0 else 0)
            st.metric(
                "Bless√©s 2024",
                f"{current_injuries:,}",
                f"{variation_injuries:+.1f}%",
                help="Nombre de bless√©s de 2024 et variation par rapport √† 2023",
                delta_color='inverse'
            )
        
        with cols[3]:
            avg_response_time = filtered_df['Emergency Response Time'].mean()
            st.metric(
                "Temps de r√©ponse moyen",
                f"{avg_response_time:.1f} min",
                help="Temps moyen d'intervention des secours"
            )

        
    # S√©lection de m√©trique avec description
    st.subheader("üìä Visualisation des tendances", anchor=False)
    
    metric = st.radio(
        "Choisissez une m√©trique √† visualiser :",
        options=["Number of Fatalities", "Number of Injuries"],
        format_func=lambda x: "Nombre de d√©c√®s" if x == "Number of Fatalities" else "Nombre de bless√©s",
        horizontal=True,
        help="S√©lectionnez la m√©trique √† afficher sur les graphiques"
    )
    
    # Disposition des visualisations en onglets
    tab1, tab2 = st.tabs(["üìä Tendances globales", "‚è∞ Patterns temporels"])
    
    with tab1:
        # Ligne temporelle principale
        st.markdown("#### üìà √âvolution temporelle")
        timeline = create_timeline(filtered_df, metric)
        st.plotly_chart(timeline, use_container_width=True)
        
        # D√©composition temporelle
        st.markdown("#### üîç D√©composition temporelle d√©taill√©e")    
        st.markdown("""
            Cette visualisation d√©compose la s√©rie temporelle en ses composantes :
            - **Tendance** : √©volution √† long terme
            - **Saisonnalit√©** : motifs cycliques
            - **R√©sidus** : variations inexpliqu√©es
        """)
        decomposition = create_temporal_decomposition(filtered_df)
        st.plotly_chart(decomposition, use_container_width=True)
    
    with tab2:
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üìÖ Distribution mensuelle")
            monthly_dist = create_monthly_distribution(filtered_df)
            st.plotly_chart(monthly_dist, use_container_width=True)
        
        with col2:
            st.markdown("#### üïí Heatmap jour/heure")
            heatmap = create_weekly_hourly_heatmap(filtered_df, metric)
            st.plotly_chart(heatmap, use_container_width=True)

    # Statistiques temporelles additionnelles
    with st.expander("üìà Statistiques temporelles", expanded=False):

        # Calcul des statistiques par p√©riode
        time_stats = filtered_df.groupby(pd.Grouper(key='Date', freq='M')).agg({
            'Number of Fatalities': ['sum', 'mean'],
            'Number of Injuries': ['sum', 'mean'],
            'Emergency Response Time': 'mean'
        }).round(2)
        
        # Formatage du tableau
        time_stats.columns = ['D√©c√®s (total)', 'D√©c√®s (moy/jour)', 
                            'Bless√©s (total)', 'Bless√©s (moy/jour)',
                            'Temps r√©ponse moyen (min)']
        
        # Affichage du tableau
        st.dataframe(
            time_stats,
            use_container_width=True,
            column_config={
                "Temps r√©ponse moyen (min)": st.column_config.NumberColumn(format="%.1f")
            }
        )

        # Bouton de t√©l√©chargement
        csv = time_stats.to_csv()
        st.download_button(
            label="üì• T√©l√©charger les statistiques (CSV)",
            data=csv,
            file_name="statistiques_temporelles.csv",
            mime="text/csv",
        )