import pandas as pd
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from ..data_loader import load_data, filter_data
from ..utils.viz_helpers import style_chart
from ..components.filters import render_filters

def create_age_gender_pyramid(df, metric='Number of Fatalities'):
    """Cr√©ation de la pyramide des √¢ges par genre"""
    driver_age_order = ['<18', '18-25', '26-40', '41-60', '61+']
    df['Driver Age Group'] = pd.Categorical(df['Driver Age Group'], categories=driver_age_order, ordered=True)
    age_gender_data = df.groupby(['Driver Age Group', 'Driver Gender']).agg({
        'Number of Fatalities': 'sum',
        'Number of Injuries': 'sum'
    }).reset_index()
    
    # Inverser les valeurs pour un genre pour cr√©er la pyramide
    age_gender_data.loc[age_gender_data['Driver Gender'] == 'Male', metric] *= -1

    # D√©finir la palette en fonction du metric actuel
    palette = px.colors.sequential.Reds if metric == 'Number of Fatalities' else px.colors.sequential.Blues
    
    fig = go.Figure()
    for gender in ['Female', 'Male']:
        data = age_gender_data[age_gender_data['Driver Gender'] == gender]
        color = palette[2] if gender == 'Male' else palette[6] 
        fig.add_trace(go.Bar(
            name=gender,
            y=data['Driver Age Group'],
            x=data[metric],
            orientation='h',
            marker=dict(color=color)
        ))
    
    fig.update_layout(
        barmode='overlay',
        bargap=0.1
    )
    
    return style_chart(fig)

def create_alcohol_age_box(df):
    """Cr√©ation du box plot alcool√©mie par groupe d'√¢ge"""
    fig = px.box(
        df,
        x='Driver Age Group',
        y='Driver Alcohol Level',
        color='Driver Age Group'
    )
    return style_chart(fig)

def create_fatigue_stack(df, metric='Number of Fatalities'):
    """Cr√©ation du graphique en barres empil√©es de la fatigue"""
    driver_age_order = ['<18', '18-25', '26-40', '41-60', '61+']
    df['Driver Age Group'] = pd.Categorical(df['Driver Age Group'], categories=driver_age_order, ordered=True)
    fatigue_data = df.groupby(['Driver Age Group', 'Driver Gender', 'Driver Fatigue']).agg({
        'Number of Fatalities': 'sum',
        'Number of Injuries': 'sum'
    }).reset_index()

    # Attribution des couleurs : nuance claire pour Female, plus fonc√©e pour Male
    palette = px.colors.sequential.Reds if metric == 'Number of Fatalities' else px.colors.sequential.Blues
    color_discrete_map = {
        'Male': palette[2],  # Nuance claire
        'Female': palette[6]      # Nuance plus fonc√©e
    }
    
    fig = px.bar(
        fatigue_data,
        x='Driver Age Group',
        y=metric,
        color='Driver Gender',
        facet_col='Driver Fatigue',
        color_discrete_map=color_discrete_map
    )
    return style_chart(fig)

def create_driver_treemap(df, metric='Number of Fatalities'):
    """Cr√©ation du treemap des facteurs conducteurs"""
    treemap_data = df.groupby([
        'Driver Age Group', 'Driver Gender', 'Driver Fatigue'
    ]).agg({
        'Number of Fatalities': 'sum',
        'Number of Injuries': 'sum',
        'Driver Alcohol Level': 'mean'
    }).reset_index()
    
    fig = px.treemap(
        treemap_data,
        path=['Driver Age Group', 'Driver Gender', 'Driver Fatigue'],
        values=metric,
        color='Driver Alcohol Level',
        color_continuous_scale='Reds' if metric == "Number of Fatalities" else 'Blues'
    )
    return style_chart(fig)

def render_driver_page():
    """
    Affiche la page d'analyse des facteurs li√©s aux conducteurs avec une interface am√©lior√©e
    """
    # En-t√™te avec contexte
    st.title("üë• Analyse des Facteurs li√©s aux Conducteurs")
    st.markdown("""
        Explorez le profil des conducteurs impliqu√©s dans les accidents et analysez 
        l'impact des facteurs humains : √¢ge, genre, fatigue, alcool...
        Utilisez les filtres dans la barre lat√©rale pour affiner votre analyse.
    """)

    # Chargement des donn√©es avec indicateur de progression
    with st.spinner("Chargement des donn√©es..."):
        df = load_data()
        if df is None:
            st.error("‚ùå Erreur lors du chargement des donn√©es.")
            return

    # Application des filtres
    filters = render_filters()
    filtered_df = filter_data(df, filters)

    # Conteneur pour les m√©triques cl√©s sur les conducteurs
    with st.container():
        cols = st.columns(4)
        
        with cols[0]:
            avg_age = filtered_df['Driver Age Group'].mode()[0]
            st.metric(
                "Groupe d'√¢ge moyen",
                f"{str(avg_age)}",
                help="Groupe d'√¢ge moyen des conducteurs impliqu√©s"
            )
        
        with cols[1]:
            pct_male = (filtered_df['Driver Gender'] == 'Male').sum() / len(filtered_df) * 100
            st.metric(
                "Conducteurs hommes",
                f"{pct_male:.1f}%",
                help="Pourcentage de conducteurs masculins"
            )
        
        with cols[2]:
            pct_alcohol = filtered_df['Driver Alcohol Level'].mean()
            st.metric(
                "Alcool√©mie moyenne",
                f"{pct_alcohol:.1f}",
                help="Alcool√©mie moyenne des conducteurs (0 - 0.5)"
            )
        
        with cols[3]:
            pct_fatigue = (filtered_df['Driver Fatigue'] == 1).sum() / len(filtered_df) * 100
            st.metric(
                "Conducteurs fatigu√©s",
                f"{pct_fatigue:.1f}%",
                help="Pourcentage de conducteurs fatigu√©s"
            )

    # S√©lection de m√©trique avec description
    st.subheader("üìä Analyse des profils conducteurs", anchor=False)
    metric = st.radio(
        "Choisissez une m√©trique √† visualiser :",
        options=["Number of Fatalities", "Number of Injuries"],
        format_func=lambda x: "Nombre de d√©c√®s" if x == "Number of Fatalities" else "Nombre de bless√©s",
        horizontal=True,
        help="S√©lectionnez la m√©trique √† afficher sur les graphiques"
    )

    # Organisation en onglets th√©matiques
    tab1, tab2 = st.tabs(["üìä D√©mographie", "üöó Facteurs de risque"])
    
    with tab1:
        col1, col2 = st.columns(2)

        with col1:
            # Pyramide des √¢ges avec contexte
            st.markdown("#### üë• Distribution par √¢ge et genre")
            age_gender = create_age_gender_pyramid(filtered_df, metric)
            st.plotly_chart(age_gender, use_container_width=True)
            
        with col2:
            # Treemap avec facteurs multiples
            st.markdown("#### üéØ Vue d'ensemble des facteurs conducteur")
            driver_tree = create_driver_treemap(filtered_df, metric)
            st.plotly_chart(driver_tree, use_container_width=True)

    with tab2:
        col1, col2 = st.columns(2)
        
        with col1:
            # Box plot alcool√©mie avec contexte
            st.markdown("#### üç∑ Alcool√©mie par groupe d'√¢ge")
            alcohol_box = create_alcohol_age_box(filtered_df)
            st.plotly_chart(alcohol_box, use_container_width=True)
            
        with col2:
            # Graphique fatigue avec contexte
            st.markdown("#### üò¥ Impact de la fatigue")
            fatigue_stack = create_fatigue_stack(filtered_df, metric)
            st.plotly_chart(fatigue_stack, use_container_width=True)

    # Statistiques d√©taill√©es
    with st.expander("üìà Statistiques d√©taill√©es conducteurs", expanded=False):
        # Cr√©ation d'un tableau crois√© avanc√©
        driver_stats = pd.pivot_table(
            filtered_df,
            values=[metric, 'Driver Alcohol Level', 'Driver Fatigue'],
            index=['Driver Age Group', 'Driver Gender'],
            aggfunc={
                metric: 'sum',
                'Driver Alcohol Level': 'mean',
                'Driver Fatigue': 'mean'
            }
        ).round(2)
        
        # R√©initialiser l'index pour transformer les colonnes d'index en colonnes normales
        driver_stats = driver_stats.reset_index()
        
        # Affichage avec formatage
        st.dataframe(
            driver_stats,
            use_container_width=True,
            hide_index=False,
        )
        
        # Bouton de t√©l√©chargement
        csv = driver_stats.to_csv()
        st.download_button(
            label="üì• T√©l√©charger les statistiques (CSV)",
            data=csv,
            file_name="statistiques_conducteurs.csv",
            mime="text/csv",
        )
