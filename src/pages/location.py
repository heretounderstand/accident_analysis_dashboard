import pandas as pd
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from ..data_loader import load_data, filter_data
from ..utils.viz_helpers import style_chart
from ..components.filters import render_filters
from ..config import THEME_CONFIG

def create_choropleth(df, metric='Number of Fatalities'):
    """Cr√©ation de la carte choropl√®the"""
    region_data = df.groupby('Country').agg({
        'Number of Fatalities': 'sum',
        'Number of Injuries': 'sum'
    }).reset_index()

    # Cr√©ation de la colonne "ISO3" en mappant directement les valeurs
    region_data["ISO3"] = region_data["Country"].replace({
        "USA": "USA",
        "UK": "GBR",
        "Canada": "CAN",
        "India": "IND",
        "China": "CHN",
        "Japan": "JPN",
        "Russia": "RUS",
        "Brazil": "BRA",
        "Germany": "DEU",
        "Australia": "AUS"
    })
    
    fig = px.choropleth(
        region_data,
        locations='ISO3',
        color=metric,  # Mise √† jour dynamique
        hover_data=['Number of Fatalities', 'Number of Injuries'],
        color_continuous_scale='Reds' if metric == "Number of Fatalities" else 'Blues',
    )
    return style_chart(fig)

def create_urban_rural_comparison(df):
    """Cr√©ation du diagramme en barres urbain vs rural"""
    urban_rural_data = df.groupby('Urban/Rural').agg({
        'Number of Fatalities': 'sum',
        'Number of Injuries': 'sum'
    }).reset_index()
    
    fig = go.Figure()
    fig.add_trace(go.Bar(
        name='D√©c√®s',
        x=urban_rural_data['Urban/Rural'],
        y=urban_rural_data['Number of Fatalities'],
        marker_color= THEME_CONFIG['primary']
    ))
    fig.add_trace(go.Bar(
        name='Bless√©s',
        x=urban_rural_data['Urban/Rural'],
        y=urban_rural_data['Number of Injuries'],
        marker_color= THEME_CONFIG['secondary']
    ))
    
    fig.update_layout(
        barmode='group'
    )
    return style_chart(fig)

def create_density_heatmap(df, metric='Number of Fatalities'):
    """Cr√©ation de la carte de chaleur de densit√©"""
    time_order = ["Morning", "Afternoon", "Evening", "Night"]
    df["Time of Day"] = pd.Categorical(df["Time of Day"], categories=time_order, ordered=True)
    density_data = df.pivot_table(
        index='Region',
        columns='Time of Day',
        values= metric,
        aggfunc='sum'
    ).fillna(0)
    
    fig = px.imshow(
        density_data,
        color_continuous_scale='Reds' if metric == "Number of Fatalities" else 'Blues'
    )
    return style_chart(fig)

def render_location_page():
    """
    Affiche la page d'analyse g√©ographique des accidents avec une interface am√©lior√©e
    """
    # En-t√™te avec contexte
    st.title("üó∫Ô∏è Analyse G√©ographique des Accidents")
    st.markdown("""
        Visualisez la distribution g√©ographique des accidents et analysez les tendances par r√©gion.
        Utilisez les filtres dans la barre lat√©rale pour affiner votre analyse.
    """)

    # Chargement des donn√©es avec indicateur de progression
    with st.spinner("Chargement des donn√©es..."):
        df = load_data()
        if df is None:
            st.error("‚ùå Erreur lors du chargement des donn√©es.")
            return

    # Application des filtres
    filters = render_filters()
    filtered_df = filter_data(df, filters)
    
    # Conteneur pour les m√©triques globales
    with st.container():
        cols = st.columns(4)
        with cols[0]:
            st.metric(
                "Total accidents",
                f"{len(filtered_df):,}",
                help="Nombre total d'accidents apr√®s application des filtres"
            )
        with cols[1]:
            st.metric(
                "D√©c√®s",
                f"{filtered_df['Number of Fatalities'].sum():,}",
                help="Nombre total de d√©c√®s"
            )
        with cols[2]:
            st.metric(
                "Bless√©s",
                f"{filtered_df['Number of Injuries'].sum():,}",
                help="Nombre total de bless√©s"
            )
        with cols[3]:
            st.metric(
                "Perte √©conomique",
                f"{filtered_df['Economic Loss'].sum():,.0f} ‚Ç¨",
                help="Impact √©conomique total estim√©"
            )

    # S√©lection de m√©trique avec description
    st.subheader("üìä Visualisation des donn√©es", anchor=False)
    metric = st.radio(
        "Choisissez une m√©trique √† visualiser :",
        options=["Number of Fatalities", "Number of Injuries"],
        format_func=lambda x: "Nombre de d√©c√®s" if x == "Number of Fatalities" else "Nombre de bless√©s",
        horizontal=True,
        help="S√©lectionnez la m√©trique √† afficher sur les cartes"
    )
    
    # Disposition des visualisations en onglets
    tab1, tab2 = st.tabs(["üó∫Ô∏è Vue d'ensemble", "üìç Analyse territoriale"])
    
    with tab1:
        # Carte principale avec titre explicatif
        st.markdown("#### üìç Distribution g√©ographique")
        choropleth = create_choropleth(filtered_df, metric)
        st.plotly_chart(choropleth, use_container_width=True)
    
    with tab2:
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üî• Zones de concentration")
            density_map = create_density_heatmap(filtered_df, metric)
            st.plotly_chart(density_map, use_container_width=True)
        
        with col2:
            st.markdown("#### üèòÔ∏è Comparaison Urbain/Rural")
            urban_rural = create_urban_rural_comparison(filtered_df)
            st.plotly_chart(urban_rural, use_container_width=True)

    # Statistiques r√©gionales dans un conteneur d√©roulant
    with st.expander("üìà Statistiques d√©taill√©es par r√©gion", expanded=False):
        # Calcul des statistiques avec pourcentages
        region_stats = filtered_df.groupby('Region').agg({
            'Number of Fatalities': 'sum',
            'Number of Injuries': 'sum',
            'Economic Loss': 'sum'
        }).round(2)
        
        # Ajout des pourcentages
        region_stats['% D√©c√®s'] = (region_stats['Number of Fatalities'] / region_stats['Number of Fatalities'].sum() * 100).round(1)
        region_stats['% Bless√©s'] = (region_stats['Number of Injuries'] / region_stats['Number of Injuries'].sum() * 100).round(1)
        
        # Renommage des colonnes pour l'affichage
        region_stats.columns = ['D√©c√®s', 'Bless√©s', 'Perte √©conomique (‚Ç¨)', '% D√©c√®s', '% Bless√©s']
        
        # Formatage des valeurs mon√©taires
        region_stats['Perte √©conomique (‚Ç¨)'] = region_stats['Perte √©conomique (‚Ç¨)'].apply(lambda x: f"{x:,.0f}")
        
        # Affichage du tableau avec style
        st.dataframe(
            region_stats,
            use_container_width=True,
            hide_index=False,
            column_config={
                "D√©c√®s": st.column_config.NumberColumn(help="Nombre total de d√©c√®s par r√©gion"),
                "Bless√©s": st.column_config.NumberColumn(help="Nombre total de bless√©s par r√©gion"),
                "% D√©c√®s": st.column_config.NumberColumn(help="Pourcentage des d√©c√®s totaux", format="%.1f%%"),
                "% Bless√©s": st.column_config.NumberColumn(help="Pourcentage des bless√©s totaux", format="%.1f%%"),
            }
        )

        # T√©l√©chargement des donn√©es
        csv = region_stats.to_csv(index=True)
        st.download_button(
            label="üì• T√©l√©charger les statistiques (CSV)",
            data=csv,
            file_name="statistiques_regionales.csv",
            mime="text/csv",
        )